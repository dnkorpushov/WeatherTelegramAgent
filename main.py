import os
import sys

from langchain_gigachat.tools.giga_tool import giga_tool
from langchain_core.messages import HumanMessage
from langchain_gigachat import GigaChat
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver

import telebot
from telebot import types
import signal

from dotenv import load_dotenv

from pydantic import BaseModel, Field
from typing import List

from utils import get_weather, get_city_name_by_coords


system_prompt = """
–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ–≥–æ–¥–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
–£–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥. 
–ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ. 
–î–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–æ–≤–µ—Ç, –∫–∞–∫ –æ–¥–µ—Ç—å—Å—è –≤ —Ç–∞–∫—É—é –ø–æ–≥–æ–¥—É.
–û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–≥–æ–¥–µ –∏ –∫–∞–∫ –æ–¥–µ—Ç—å—Å—è –≤ —Ç–∞–∫—É—é –ø–æ–≥–æ–¥—É.
–ù–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞.
"""

load_dotenv()

telegram_token = str(os.getenv("TELEGRAM_TOKEN"))
gigachat_token = os.getenv("GIGACHAT_TOKEN")
openweathermap_api_key = os.getenv("OPENWEATHERMAP_API_KEY")

get_current_weather_examples = [
    {
        "request": "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –•—É—Ä–≥–∞–¥–µ",
        "params": {"city": "–•—É—Ä–≥–∞–¥–∞"},
    },
    {
        "request": "–∞ –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ø—Ö—É–∫–µ—Ç–µ",
        "params": {"city": "–ü—Ö—É–∫–µ—Ç"},
    },
    {
        "request": "—á—Ç–æ —Ç–∞–º –≤ –∫–∞–Ω–Ω–∞—Ö",
        "params": {"city": "–ö–∞–Ω–Ω—ã"},
    },
]


class GetCurrentWeatherResult(BaseModel):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã.
    """

    weather: str = Field(description="–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")


@giga_tool(few_shot_examples=get_current_weather_examples)
def get_current_weather(
    city: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"),
) -> GetCurrentWeatherResult:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.
    """
    result = get_weather(city, openweathermap_api_key)
    return GetCurrentWeatherResult(weather=result)


bot = telebot.TeleBot(telegram_token)
model = GigaChat(
    credentials=gigachat_token,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False,
)

tools = [get_current_weather]
model_with_functions = model.bind_functions(tools)
agent = create_react_agent(
    model_with_functions,
    tools=tools,
    checkpointer=MemorySaver(),
    # state_modifier=system_prompt
    prompt=system_prompt
)


@bot.message_handler(commands=["start"])
def start_bot(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    repeat_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
    where_am_i_button = types.KeyboardButton("üåê –Ø –∑–¥–µ—Å—å", request_location=True)
    markup.add(repeat_button)
    markup.add(where_am_i_button)

    first_message = (
        f"{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–≥–æ–¥–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—à—Å—è?"
    )
    bot.send_message(message.chat.id, first_message, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
def do_repeat(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞".
    """
    start_bot(message)


@bot.message_handler(content_types=["location"])
def get_location(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.
    """

    city_name = get_city_name_by_coords(
        message.location.latitude,
        message.location.longitude,
        openweathermap_api_key,
        lang="ru",
    )
    if city_name:
        bot.send_message(message.chat.id, f"–¢—ã –≤ –≥–æ—Ä–æ–¥–µ {city_name}")
        message.text = (
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –∏ –¥–∞–π —Å–æ–≤–µ—Ç, "
            "–∫–∞–∫ –æ–¥–µ—Ç—å—Å—è –≤ —Ç–∞–∫—É—é –ø–æ–≥–æ–¥—É."
        )
        answer(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥.")


@bot.message_handler(content_types=["text"])
def answer(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    config = {"configurable": {"thread_id": message.chat.id}}
    try:
        response = agent.invoke(
            {"messages": [HumanMessage(content=message.text)]}, config
        )
        bot.send_message(message.chat.id, response["messages"][-1].content)
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


def stop_bot(sig, frame):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞.
    """
    print("–ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    bot.stop_polling()
    sys.exit(0)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, stop_bot)
    print("–ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤. Ctrl-C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.", flush=True)
    bot.infinity_polling()
